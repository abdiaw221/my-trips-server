version: "4"

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: "${POSTGRES_DOCKER_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_DOCKER_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DOCKER_DATABASE}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - postgres_network
    ports:
      - "${POSTGRES_DOCKER_PORT}:${POSTGRES_LOCAL_PORT}"

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PG_ADMIN_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PG_ADMIN_PASSWORD}"
    ports:
      - "${PG_ADMIN_DOCKER_PORT}:${PG_ADMIN_LOCAL_PORT}"
    depends_on:
      - postgres
    volumes:
      - pgadmin:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - postgres_network

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    container_name: keycloak
    build:
      context: .
      dockerfile: Dockerfile.keycloak
    command: start
    environment:
      KEYCLOAK_USER: "${KEYCLOAK_USER}"
      KEYCLOAK_PASSWORD: "${KEYCLOAK_PASSWORD}"
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: "${POSTGRES_DOCKER_DATABASE}"
      DB_USER: "${POSTGRES_DOCKER_USER}"
      DB_PASSWORD: "${POSTGRES_DOCKER_PASSWORD}"
      KC_HOSTNAME: "${KEYCLOAK_HOST}"
      KC_HOSTNAME_PORT: "${KEYCLOAK_DOCKER_PORT}"
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: "${KEYCLOAK_USER}"
      KEYCLOAK_ADMIN_PASSWORD: "${KEYCLOAK_PASSWORD}"
    ports:
      - "${KEYCLOAK_DOCKER_PORT}:${KEYCLOAK_LOCAL_PORT}"
    restart: always
    depends_on:
      - postgres
    networks:
      - keycloak_network
    volumes:
      - ./my-realm.json:/opt/keycloak/data/import/my-realm.json
      - ./keycloak-entrypoint.sh:/opt/keycloak/bin/keycloak-entrypoint.sh
    entrypoint: [ "/opt/keycloak/bin/keycloak-entrypoint.sh" ]

  mongo:
    image: mongo:latest
    container_name: mongo-db
    ports:
      - "${MONGO_DOCKER_PORT}:${MONGO_LOCAL_PORT}"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_ROOT_USER}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_ROOT_PASSWORD}"
      MONGO_INITDB_DATABASE: trip_db
    networks:
      - mongo_network
    volumes:
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "${MONGO_EXPRESS_DOCKER_PORT}:${MONGO_EXPRESS_LOCAL_PORT}"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo-db
      ME_CONFIG_MONGODB_ADMINUSERNAME: "${MONGO_ROOT_USER}"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "${MONGO_ROOT_PASSWORD}"
      ME_CONFIG_BASICAUTH_USERNAME: "${MONGOEXPRESS_LOGIN}"
      ME_CONFIG_BASICAUTH_PASSWORD: "${MONGOEXPRESS_PASSWORD}"
      ME_CONFIG_MONGODB_PORT: "${MONGO_DOCKER_PORT}"
    restart: unless-stopped
    depends_on:
      - mongo
    networks:
      - mongo_network
    volumes:
      - mongo-data:/data/db

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - TERM=linux
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-polystat-panel
    ports:
      - "${GRAFANA_DOCKER_PORT}:${GRAFANA_LOCAL_PORT}"
    volumes:
      - grafana_data:/var/lib/grafana

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.3
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - elastic

  logstash:
    image: docker.elastic.co/logstash/logstash:8.3.3
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5001:5001/tcp"
      - "5001:5001/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elastic
    depends_on:
      - elasticsearch

volumes:
  postgres_data:
    driver: local
  pgadmin:
    driver: local
  mongo-data:
  grafana_data:
  elasticsearch_data:
    driver: local

networks:
  mongo_network:
    driver: bridge
  postgres_network:
    driver: bridge
  keycloak_network:
    driver: bridge
  elastic:
    driver: bridge